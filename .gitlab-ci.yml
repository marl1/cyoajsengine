stages:
  - build
  - e2e
  - deploy
  - release

image: busybox

build:
  stage: build
  script:
    - echo "Creation d'un timestamp pour eviter le cache..."
    - timestamp=$(date +%s)
    - echo "Copie du moteur dans les dossiers des jeux..."
    - cp ./www/moteurldvelh.js ./www/jeux/1_jeu_exemple/data/
    - cp ./www/moteurldvelh.js ./www/jeux/cyberpunk/data/
    - echo "Modification des chemins dans les index.htm..."
    - sed -i "s,../../moteurldvelh.js,data/moteurldvelh.js?$timestamp," ./www/jeux/1_jeu_exemple/index.htm
    - sed -i "s,../../moteurldvelh.js,data/moteurldvelh.js?$timestamp," ./www/jeux/cyberpunk/index.htm
    - mkdir .public
    - cp -r ./www/* .public
    - mv .public public
  artifacts:
    paths:
      - public

e2e tests:
  stage: e2e
  image: mcr.microsoft.com/playwright:v1.36.0-jammy
  parallel: 1
  script:
    - npm ci
    - (npm run start&)
    - npx playwright test

pages: #GitLab détecte ce mot "page" et fait l'upload avec un job pages:deploy derrière, cf https://stackoverflow.com/questions/53953919/
  dependencies:
    - build
  stage: deploy
  script:
    - echo "The site will be deployed to $CI_PAGES_URL"
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release_job:
  variables:
    VERSION_POUR_GITLAB: $(grep -m1 "" file.txt)
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  when: manual
  script:
    - echo "Lancement de la release de la version $VERSION_POUR_GITLAB..."
  release:
    tag_name: $VERSION_POUR_GITLAB
    description: "blah"